<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         version="4.0">

    <!--
        ContextLoaderListener相当于ServletContextListener，会在Tomcat容器启动后，进行执行
        且只执行一次，就可以创建咱们这个WebXmlApplicationContext了
     -->


    <!--
        声明，注册SpringMVC的核心对象DispatcherServlet(中央控制器)
        需要在Tomcat服务器启动后，创建DispatcherServlet对象的实例

        为什么要创建DispatcherServlet对象的实例呢？
        因为DispatcherServlet在创建的过程中，会同时创建SpringMVC容器对象
        读取SpringMVC的配置文件，把这个配置文件中的对象都创建好，当用户发起请求时就可以直接使用对象了

        这个contextConfiguration设置的是FrameworkServlet的参数，会被用以在创建ApplicationContext时
        使用XML配置文件进行来初始化的

        默认的配置文件/WEB-INF/[<servlet-name>-springDispatcherServlet]-servlet.xml
    -->
    <servlet>
        <servlet-name>springDispatcherServlet</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <!-- 自定义SpringMVC读取的配置文件的位置 -->
        <init-param>
            <!-- SpringMVC的配置文件的位置属性 -->
            <param-name>contextConfigLocation</param-name>
            <!-- 指定自定义文件的位置 -->
<!--            <param-value>classpath:spring-mvc.xml</param-value>-->
            <param-value>classpath:ssm-mvc.xml</param-value>
        </init-param>
        <!--
            Tomcat启动后，创建Servlet对象，
            load-on-startup:表示tomcat启动后创建对象的顺序，
            他的值是整数，数值与小，创建对象的时机就越早，大于0的证书
         -->
        <load-on-startup>1</load-on-startup>
    </servlet>

    <!-- DispatcherServlet 拦截所有请求-->
    <servlet-mapping>
        <servlet-name>springDispatcherServlet</servlet-name>
        <!--
            使用框架的时候，url-pattern可以使用两种值
            1.使用扩展名的方式，语法 *.xxx，xxxx是自定义的扩展名。常用的方式，*.do，*.action，*.mvc等等

            2.使用"/"
         -->
<!--        <url-pattern>/</url-pattern>-->
        <url-pattern>*.do</url-pattern>
    </servlet-mapping>


    <!-- SSM整合，注册Spring的监听器 -->
    <listener>
        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
    </listener>
    
    <context-param>
        <param-name>contextConfigLocation</param-name>
        <param-value>classpath:ssm-spring.xml</param-value>
    </context-param>


    <!-- HiddenHttpMethodFilter 可以将POST请求转换为DELETE或POST请求 -->
    <filter>
        <filter-name>hiddenHttpMethodFilter</filter-name>
        <filter-class>org.springframework.web.filter.HiddenHttpMethodFilter</filter-class>
    </filter>

    <filter-mapping>
        <filter-name>hiddenHttpMethodFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

    <!-- CharacterEncodingFilter解决请求参数乱码 问题 -->
    <filter>
        <filter-name>characterEncodingFilter</filter-name>
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
        <!-- 设置项目中的字符编码 -->
        <init-param>
            <param-name>encoding</param-name>
            <param-value>UTF-8</param-value>
        </init-param>
        <!-- 强制请求对象(HttpServletRequest)使用encoding编码的值 -->
        <init-param>
            <param-name>forceRequestEncoding</param-name>
            <param-value>true</param-value>
        </init-param>
        <!-- 强制应答对象(HttpServletResponse)使用encoding编码的值 -->
        <init-param>
            <param-name>forceResponseEncoding</param-name>
            <param-value>true</param-value>
        </init-param>
    </filter>

    <filter-mapping>
        <filter-name>characterEncodingFilter</filter-name>
        <!-- 表示强制所有请求先通过此过滤器 -->
        <url-pattern>/*</url-pattern>
    </filter-mapping>


</web-app>